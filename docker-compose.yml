version: '3'
services:
    app01:
        build: .
        container_name: app01
        environment:
            - LANG=C.UTF-8
            - node.name=es01
            - cluster.name=es-docker-cluster
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - "discovery.type=single-node"
        ports:
            - 5050:5050
        networks:
            - production-network
    es01:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.7.1
        container_name: es01
        environment:
            - node.name=es01
            - cluster.name=es-docker-cluster
#            - discovery.seed_hosts=es02,es03
#            - cluster.initial_master_nodes=es01,es02,es03
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - "discovery.type=single-node"
        ulimits:
            memlock:
                soft: -1
                hard: -1
#        volumes:
#            - data01:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - production-network


    kib01:
        image: docker.elastic.co/kibana/kibana:7.7.1
        container_name: kib01
        ports:
            - 5601:5601
        environment:
            ELASTICSEARCH_URL: http://es01:9200
            ELASTICSEARCH_HOSTS: http://es01:9200
        networks:
            - production-network

#MongoDB: https://hub.docker.com/_/mongo/
    mongo:
        image: mongo
        container_name: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: example
        ports:
                - 27017:27017
        networks:
            - production-network
    mongo-express:
        image: mongo-express
        container_name: mongo-express
        restart: always
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: example
        networks:
            - production-network
# prometheus

    prometheus:
        image: prom/prometheus:v2.1.0
        volumes:
            - ./docker/prometheus/:/etc/prometheus/
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
        ports:
            - 9090:9090
    grafana:
        image: grafana/grafana:6.5.2
        ports:
            - 3060:3000

volumes:
    data01:
        driver: local
    data02:
        driver: local
    data03:
        driver: local

networks:
    production-network:
        driver: bridge